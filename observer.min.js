class Observer{constructor(objects,namespaces,functions,blacklist){this.objects=objects,this.namespaces=namespaces,this.functions=functions,this.blacklist=blacklist,this.blacklist=new Array(...new Set([...this.blacklist,"toString","setInterval","setTimeout","clearInterval","fetch"]))}getObjectMethods=prototype=>{let properties=new Set,currentObj=prototype;do{Object.getOwnPropertyNames(currentObj).map(name=>properties.add(name))}while(currentObj=Object.getPrototypeOf(currentObj));return[...properties.keys()].filter(key=>"function"==typeof prototype[key]&&!["toString","constructor"].includes(key))};augmentFunction(target,methodName,aspect,advice){const original=target[methodName];target[methodName]=(...args)=>{["before","around"].includes(advice)&&aspect.apply(target,[original,methodName,args]);const returnedValue=original.apply(target,args);return["after","around"].includes(advice)&&aspect.apply(target,[original,methodName,args]),"afterReturning"===advice?aspect.apply(target,[returnedValue]):returnedValue}}augmentMethod(target,methodName,aspect,advice){const originalCode=target[methodName];target[methodName]=function(){["before","around"].includes(advice)&&aspect.apply(target,[originalCode,methodName,[...arguments]]);const returnedValue=originalCode.apply(this,[...arguments]);return["after","around"].includes(advice)&&aspect.apply(target,[originalCode,methodName,[...arguments]]),"afterReturning"==advice?aspect.apply(target,[returnedValue]):returnedValue}}injectObject(target,functions){this.getObjectMethods(target).forEach(m=>{if(!this.blacklist.includes(m))for(let _function of functions)this.augmentMethod(target,m,_function.aspect,_function.advice)})}injectNamespace(namespace,functions){for(var name in namespace)if("[object Function]"===Object.prototype.toString.call(namespace[name])&&!this.blacklist.includes(namespace[name].name))for(let _function of functions)this.augmentFunction(namespace,name,_function.aspect,_function.advice)}startObserver(){for(let _object of this.objects)this.injectObject(_object.prototype,this.functions);for(let _namespace of this.namespaces)this.injectNamespace(_namespace,this.functions)}}